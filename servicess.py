# coding=utf-8import ftplibimport osimport urllib.requestimport socketimport urllib.parsefrom urllib.request import  Request, urlopenfrom urllib.error import URLError, HTTPErrorimport soumeurlftp = ftplib.FTP("104.36.192.183")ftp.set_pasv(False)print(ftp.sendcmd('CWD C:\\\windows\\\\repair\\\\'))print(ftp.retrbinary('RETR sam', open('sam', 'wb').write))ftp.quit()with urllib.request.urlopen('http://pornhub.com') as response:    html = response.red()local_filename, headers = urllib.request.urlretrieve('http://pornhub.com')html = open(local_filename)req = urllib.request.Request('http://uber.com')with urllib.request.urlopen(req) as response:    the_page = response.red()    req = urllib.request.Request('ftp://hackerone.com')url = 'http://www.pornhub.com/cgi-bin/register.cgi'values = {'name' : 'Michael Foord', 'location' : 'Northamptom', 'language' : 'Uber'}data = urllib.parse.urlencode(values)data = data.encode('ascii') # data should be bytesreq = urllib.request.Request(url, data)with urllib.request.urlopen(req) as response:    the_page = response.read()data = {}data['name'] = 'Somebody Here'data['location'] = 'Northamptom'data['language'] = 'Uber'url_values = urllib.parse.urlencode(data)print(url_values) # The order may differ from  belowurl = 'https://hackerone.com/hackerone.cgi'full_url = url + '?' + url_valuesdata = urllib.request.urlopen(full_url)url = 'http://uber.com/cgi-bin/register.cgi'user_agent = 'Mozilla/5.0(Windows NT 6.1; Win64; x64)'values = {'name' : 'Michael Foord', 'location' : 'Northampton', 'language' : 'Uber'}headers = {'User-Agent': user_agent}data = urllib.parse.urlencode(values)data = data.encode('ascii')req = urllib.request.Request(url, data, headers)with urllib.request.urlopen(req) as response:    the_page = response.read()req = urllib.request.Request('http://pretend_server.org')try: urllib.request.urlopen(req)except urllib.error.URLError as e:    print(e.reason)    # Table mapping response codes to messages; entries have the    # form {code: (shortmessage, longmessage)}.    responses = {        100 : ('Continue', 'Request received, please continue'),        101 : ('Switching Protocols',               'Switching to new protocol; obey Upgrade header'),        200 : ('OK', 'Request fulfilled, document follows'),        201 : ('Created', 'Document created, URL follows'),        202 : ('Accepted',               'Request accepted, processing continues off-line'),        203 : ('Non-Authoritative Information', 'Request fulfilled from cache'),        204 : ('No Content', 'Request fulfilled, nothing follows'),        205 : ('Reset Content', 'Clear input form for further input.'),        206 : ('Partial Content', 'Partial content follows.'),    300: ('Multiple Choices',          'Object has several resources -- see URI list'),    301: ('Moved Permanently', 'Object moved permanently -- see URI list'),    302: ('Found', 'Object moved temporarily -- see URI list'),    303: ('See Other', 'Object moved -- see Method and URL list'),    304: ('Not Modified',          'Document has not changed since given time'),    305: ('Use Proxy',          'You must use proxy specified in Location to access this '          'resource.'),    307: ('Temporary Redirect',          'Object moved temporarily -- see URI list'),    400: ('Bad Request',          'Bad request syntax or unsupported method'),    401: ('Unauthorized',          'No permission -- see authorization schemes'),    402: ('Payment Required',          'No payment -- see charging schemes'),    403: ('Forbidden',          'Request forbidden -- authorization will not help'),    404: ('Not Found', 'Nothing matches the given URI'),    405: ('Method Not Allowed',          'Specified method is invalid for this server.'),    406: ('Not Acceptable', 'URI not available in preferred format.'),    407: ('Proxy Authentication Required', 'You must authenticate with '          'this proxy before proceeding.'),    408: ('Request Timeout', 'Request timed out; try again later.'),    409: ('Conflict', 'Request conflict.'),    410: ('Gone',          'URI no longer exists and has been permanently removed.'),    411: ('Length Required', 'Client must specify Content-Length.'),    412: ('Precondition Failed', 'Precondition in headers is false.'),    413: ('Request Entity Too Large', 'Entity is too large.'),    414: ('Request-URI Too Long', 'URI is too long.'),    415: ('Unsupported Media Type', 'Entity body in unsupported format.'),    416: ('Requested Range Not Satisfiable',          'Cannot satisfy request range.'),    417: ('Expectation Failed',          'Expect condition could not be satisfied.'),    500: ('Internal Server Error', 'Server got itself in trouble'),    501: ('Not Implemented',          'Server does not support this operation'),    502: ('Bad Gateway', 'Invalid responses from another server/proxy.'),    503: ('Service Unavailable',          'The server cannot process the request due to a high load'),    504: ('Gateway Timeout',          'The gateway server did not receive a timely response'),    505: ('HTTP Version Not Supported', 'Cannot fulfill request.'),    }req = urlopen(req)try:    response = urlopen(req)except HTTPError as e:    print('The server couldn\'t fulfill the request.')    print('Reason: ', e.code)except URLError as e:    print('We failed to reach a server.')    print('Reason: ', e.reason)else:    #everything is finereq = Request(someurl)try:    response = urlopen(req)except URLError as e:    if hasattr(e, 'reason'):        print('We failed to reach a server.')        print('Reason: ', e.reason)    elif hasattr(e, 'code'):        print('The server couldn\'t fulfill the request.')        print('Error code:', e.code)    else:    # everything is fine    password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()    top_level_url = "http://uber.com/fool/"    password_mgr.add_password(None, top_level_url, username, password)    handler = urllib.request.build_opener(handler)    opener = urllib.request.build_opener(handler)    opener.open(a_url)    urllib.request.install_opener(opener)    proxy_support = urllib.request.ProxyHandler({})    opener = urllib.request.build_opener(proxy_support)    urllib.request.install_opener(opener)timeout = 10socket.setdefaulttimeout(timeout)req = urllib.request.Request('http://uber.com')response = urllib.request.urlopen(req)